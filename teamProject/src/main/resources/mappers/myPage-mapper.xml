<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.kh.team.mappers.myPage">

	
	
	
	
	<!-- 주문된 제품 상세 목록 -->
	<select id="getOrderedDetailList" resultType="OrderedDetailDto">
		<include refid="getDtoJoin"></include>
		and o.fk_member_id = #{member_id}
		order by order_detail_no desc
	</select>
	
	
	
	
	
	<!-- 주문된 제품 상세 하나 얻기 -->
	<select id="getOneOrderedDetail" resultType="OrderedDetailDto">
		<include refid="getDtoJoin"></include>
		and od.fk_order_detail_status_code = 1
		and order_detail_no = #{order_detail_no}
	</select>
	
	
	<!-- 주문 처리용 DTO 컬럼 조인으로 얻기 -->
	<sql id="getDtoJoin">
		select o.order_no,  
			od.order_detail_no,
		    p.product_image,
		    od.fk_product_id as product_id,
		    p.product_kor_name,
		    p.product_price,
		    od.order_product_amount,
		    to_char(o.order_date, 'YYYY/MM/DD') as order_date, 
		    o.fk_member_id as member_id, 
		    o.fk_order_status_code as order_status_code, 
		    od.fk_order_detail_status_code as order_detail_status_code,
		    odsc.order_detail_status_descript
		from tal_order o, tal_order_detail od, tal_product p, tal_order_detail_status_code odsc
		where o.order_no = od.fk_order_no
		and od.fk_product_id = p.product_id
		and odsc.order_detail_status_code = od.fk_order_detail_status_code
	</sql>	







	<!-- 아래 삭제 예정 -->

	<!-- 제품 등록 -->
	<insert id="createStock">
		insert into tal_product
		values(#{product_id}, #{product_name}, #{product_price}, #{product_stock}, #{product_capacity}, 
			#{product_alcohol_degree}, #{product_expiration_date}, #{product_origin}, 
			#{product_image}, #{product_descript}, #{product_discount}, #{cate_code}, #{product_kor_name})
	</insert>
	

	<!-- 제품 총 개수 -->
	<select id="getProductCount" resultType="int">
		select count(*) from tal_product
		<include refid="searchProduct"></include>
	</select>
	
	
	<!-- id로 제품 정보 얻기 -->
	<select id="getProductInfoById" resultType="ProductVo">
		select * from tal_product
		where product_id = #{product_id}
	</select>
	
	
	<!-- 제품 목록 -->
	<select id="getStockList" resultType="ProductVo">
		select * from
			(select rownum rnum, a.* from
				(select * from tal_product
					<include refid="searchProduct"></include>
				 order by cate_code desc, product_id asc) a)
		where rnum between #{startRow} and #{endRow}
	</select>
	
	<!-- 제품 검색 조건 -->
	<sql id="searchProduct">
		<if test="searchType != null and keyword != null">
			<choose>
				<when test='searchType == "pkn"'>
					where product_kor_name like '%' || #{keyword} || '%'
				</when>
				<when test='searchType == "pi"'>
					where product_id like '%' || #{keyword} || '%'	
				</when>
				<when test='searchType == "cc"'>
					where cate_code like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
	</sql>
	
	
	<update id="stockModifyRun">
		update tal_product set
			product_name = #{product_name}, 
			product_price = #{product_price}, 
			product_stock = #{product_stock}, 
			product_capacity = #{product_capacity}, 
			product_alcohol_degree = #{product_alcohol_degree}, 
			product_expiration_date = #{product_expiration_date}, 
			product_origin = #{product_origin}, 
			product_image = #{product_image},
			product_descript = #{product_descript}, 
			product_discount = #{product_discount}, 
			cate_code = #{cate_code}, 
			product_kor_name = #{product_kor_name}
		where product_id = #{product_id}
	</update>
	
	
	
		
	<!-- 주문된 제품 목록 order_status_code 로 조회 -->
	<select id="getOrderedList" resultType="OrderVo">
		select order_no,
			order_date,
			fk_member_id as member_id,
			fk_order_status_code as order_status_code
		from tal_order
		where fk_order_status_code = #{order_status_code}
		order by order_no desc
	</select>
	

	
	
	
	
	<!-- 주문된 하나의 컬럼 승인(해당 제품의 재고 감소) -->
	<update id="orderApproval">
		update tal_product set PRODUCT_STOCK = PRODUCT_STOCK - #{order_product_amount}
		where product_id = #{product_id}
	</update>
		
	<!-- 승인된 컬럼 데이터(fk_order_detail_status_code) 2로 변경 --> 
	<update id="updateApprovedDataToSecond">
		update tal_order_detail set fk_order_detail_status_code = 2
		where order_detail_no = #{order_detail_no}
	</update>
	
	<!-- 승인 후 해당 포인트 멤버에서 차감 -->
	<update id="updateApprovedPointForMember">
		update tal_member set member_point = member_point - (#{product_price} * #{order_product_amount})
		where member_id = #{member_id}
	</update>

	
	
	<!-- !! order_detail_no를 받아서 참조하는 order_no를 얻고 이 주문에 포함된 -->
	<!-- 	FK_ORDER_DETAIL_STATUS_CODE 종류들을 얻기 -->
	<select id="getNumberOfOrderDetailStatusCode" resultType="Map">
		select distinct FK_ORDER_DETAIL_STATUS_CODE
	        from TAL_ORDER o, TAL_ORDER_DETAIL od
	        where o.order_no = od.fk_order_no
	        and order_no = 
				(select order_no 
					from tal_order o, tal_order_detail od
					where o.order_no = od.fk_order_no
					and od.order_detail_no = #{order_detail_no})
	</select>
	
	<!-- order_no의 주문 상태 코드(ORDER_STATUS_CODE)를 #{order_status_code}로 변경-> -->
	<update id="updateOrderStatusCode">
		update tal_order set fk_order_status_code = #{order_status_code}
		<include refid="updateTest"></include>
	</update>
	
	<sql id ="updateTest">
		<if test="order_no != null or order_no != 0">
			where order_no = #{order_no}
		</if>
	</sql>
	
	<!-- order_no의 주문 상태 코드(fk_order_detail_status_code)를  #{order_detail_status_code}로 변경-> -->
	<update id="updateOrderDetailStatusCode">
		update tal_order_detail set fk_order_detail_status_code = #{order_detail_status_code}
		where order_detail_no = #{order_detail_no}
	</update>
	
	
	
	
	<!--  ~로 ~얻기  -->
	
	<!--  detail_no로 order_no 얻기 -->
	<select id="getOrderNoByDetailNo" resultType="int">
		select order_no 
			from tal_order o , tal_order_detail od
			where o.order_no = od. fk_order_no
			and order_detail_no = #{order_detail_no}
	</select>
	
	<!-- order_no로 fk_member_id를 얻기 -->
	<select id="getMemberIdByOrderNo" resultType="String">
		select fk_member_id
			from tal_order
			where order_no = #{order_no}
	</select>
	
	<!-- order_no로 member_tel를 얻기 -->
	<select id="getMemberTelByOrderNo" resultType="String">
		select member_tel from tal_member
		where member_id = 
			(select fk_member_id
			from tal_order
			where order_no = #{order_no})
	</select>
	
	<!-- member_id로 memberVo 얻기 -->
	<select id="getMemberVoById" resultType="MemberVo">
		select * from tal_member
		where member_id = #{member_id}
	</select>
	
	
	<!-- MessageToSendVo 얻기 -->
	<select id="getMessageToSendVo" resultType="MessageToSendVo">
		select * from tal_message_to_send
	</select>
	
	
	
	<!-- 반품 -->
	
	<!-- 반품된 하나의 컬럼 승인(해당 제품의 재고 증가) -->
	<update id="orderRefund">
		update tal_product set PRODUCT_STOCK = PRODUCT_STOCK + #{order_product_amount}
		where product_id = #{product_id}
	</update>
	
	
	<!-- 반품 승인된 컬럼 데이터(fk_order_detail_status_code) 6으로 변경 -->
	<update id="updateApprovedDataToSixth">
		update tal_order_detail set fk_order_detail_status_code = 6
		where order_detail_no = #{order_detail_no}
	</update>
	
	
	<!-- 반품(FK_ORDER_DETAIL_STATUS_CODE = 5) 요청목록 얻기 -->
	<select id="getReturnedList" resultType="OrderedDetailDto">
		<include refid="getDtoJoin"></include>
		and od.FK_ORDER_DETAIL_STATUS_CODE = #{order_detail_status_code}
	</select>
	
	
	
	
	<!-- order_detail_no로 OrderedDetailDto 정보 얻기 -->
	<select id="getOrderedDetailByOrderDetailNo" resultType="OrderedDetailDto">
		<include refid="getDtoJoin"></include>
		and od.order_detail_no = #{map_order_detail_no}

	</select>
	
	<!-- OrderedDetailDto로 환불refund  -->
	<update id="updateRefundPointForMember">
		update tal_member set member_point = member_point + (#{product_price} * #{order_product_amount})
		where member_id = #{member_id}
	</update>
	
	
	
	
	<!-- 멤버 등록 -->
	<insert id="createMember">
		insert into tal_member
		values(#{member_id}, #{member_pw}, #{member_name}, #{nickname}, #{email},
			#{favorite}, #{regdate}, #{updatedate}, #{member_tel}, #{member_point}, #{address}, #{bandate})
	</insert>
	
	
	
	
	<!-- 멤버 목록 얻기 -->
	<select id="getMemberList" resultType="MemberVo">
		select * from
			(select rownum rnum, a.* from
				(select * from tal_member
					<include refid="searchMember"></include>
				 order by member_id desc) a)
		where rnum between #{startRow} and #{endRow}
	</select>
	
	
	<!-- 멤버 검색 조건 -->
	<sql id="searchMember">
		<if test="searchType != null and keyword != null">
			<choose>
				<when test='searchType == "mn" '>
					where member_name like '%' || #{keyword} || '%'
				</when>
				<when test='searchType == "ad" '>
					where address like '%' || #{keyword} || '%'	
				</when>
				<when test='searchType == "mt" '>
					where member_tel like '%' || #{keyword} || '%'
				</when>
			</choose>
		</if>
	</sql>
	
	
	<!-- 멤버 총 개수 -->
	<select id="getMemberCount" resultType="int">
		select count(*) from tal_member
		<include refid="searchMember"></include>
	</select>
	
	
	<!-- member_id로 멤버 정보얻기 -->
	<select id="getMemberInfoById" resultType="MemberVo">
		select 
			MEMBER_ID,
			MEMBER_PW, 
			MEMBER_NAME,
			NICKNAME, 
			EMAIL, 
			FAVORITE, 
			to_char(REGDATE, 'YYYYMMDD') as REGDATE, 
			to_char(UPDATEDATE, 'YYYYMMDD') as UPDATEDATE, 
			ADDRESS, 
			MEMBER_TEL, 
			MEMBER_POINT, 
		to_char(BANDATE, 'YYYYMMDD') as BANDATE
		from tal_member
		where member_id = #{member_id}
	</select>
	
	<!-- 멤버 정보 수정 -->
	<update id="memberModify">
		update tal_member set
			member_pw = #{member_pw}, 
			member_name = #{member_name}, 
			nickname = #{nickname}, 
			email = #{email}, 
			favorite = #{favorite}, 
			regdate = to_date(#{regdate}, 'yyyy-MM-dd'), 
			updatedate = to_date(#{updatedate}, 'yyyy-MM-dd'), 
			address = #{address}, 
			member_tel = #{member_tel}, 
			member_point = #{member_point},
			bandate = #{bandate}
		where member_id = to_date(#{member_id}, 'yyyy-MM-dd')
	</update>
	
	
		
</mapper>
